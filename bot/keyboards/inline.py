from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from bot.data.config import db

# –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def kb_back_to_main_menu():
   keyboard = InlineKeyboardMarkup()
   kb = []
   kb.append(InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu"))
   keyboard.add(kb[0])

   return keyboard

def kb_main_menu():
   keyboard = InlineKeyboardMarkup()
   kb = []
   kb.append(InlineKeyboardButton("üìÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="check_schedule"))
   kb.append(InlineKeyboardButton("üÜô –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_schedule"))
   keyboard.add(kb[0])
   keyboard.add(kb[1])

   return keyboard

def kb_edit_shedule():
   keyboard = InlineKeyboardMarkup()
   kb = []
   kb.append(InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="change_schedule"))
   kb.append(InlineKeyboardButton("üìÖ –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="fill_schedule"))
   kb.append(InlineKeyboardButton("üíº –ü—Ä–µ–¥–º–µ–º—ã", callback_data="subjects_menu"))
   kb.append(InlineKeyboardButton("üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏", callback_data="teacher_menu"))
   kb.append(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main_menu"))
   keyboard.add(kb[0])
   keyboard.add(kb[1])
   keyboard.add(kb[2], kb[3])
   keyboard.add(kb[4])
   
   return keyboard

async def kb_teacher():
   keyboard = InlineKeyboardMarkup()
   kb = []
   list = await db.get_all_teachers()
   for btn in list:
      kb.add(InlineKeyboardButton(btn['name'], callback_data=f"teacher:{btn['id']}"))
   kb.append(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–∏—Ç–µ–ª—è", callback_data="add_teacher"))
   kb.append(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main_menu"))
   keyboard.add(kb[1], kb[0])
   
   return keyboard

async def kb_subjects(page=1):
   keyboard = InlineKeyboardMarkup()
   kb = []
   list = await db.get_all_subjects(page)
   for btn in list:
      keyboard.add(InlineKeyboardButton(btn['name'], callback_data=f"teacher:{btn['id']}"))
   if page > 1:
      kb.append(InlineKeyboardButton("‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"prev_page:{page - 1}"))
   if len(list) == 10:
      kb.append(InlineKeyboardButton("‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∞—è", callback_data=f"next_page:{page + 1}"))
   keyboard.add(*kb)
   list_kb = [
      InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data=f"add_subjects"),
      InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data=f"search_subject"),
      InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")
   ]
   keyboard.add(list_kb[0], list_kb[1])
   keyboard.add(list_kb[2])

   return keyboard
 
#–ü–æ–∏—Å–∫
async def seach_list_kb(table, word):
   kb = InlineKeyboardMarkup()
   list = await db.search_by_word(table=table, word=word)
   for btn in list:
      kb.add(InlineKeyboardButton(f"{btn['name']}", callback_data=f"one_{table}:{btn['id']}"))
   kb.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"back_to_main_menu"))

   return kb